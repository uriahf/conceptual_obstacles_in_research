---
title: "Simulating Continuous Values via Rejection Sampling from a Global Normal Distribution"
format: html
editor: visual
---

# Simulating Continuous Values via Rejection Sampling from a Global Normal Distribution

##Background

In this approach, we simulate continuous values from categorical intervals using rejection sampling based on a global normal distribution.

Each original bin (e.g., \[100, 200\]) acts as a domain for candidate values, but the acceptance is based on whether the candidate lies under the bell curve of a global normal distribution.

This allows us to simulate realistic values that:

-   Stay within original bounds

-   Enable continuous modeling like linear regression

## Step-by-Step Summary

1.   **Define a global normal distribution**\
    $w∼N(μ,σ^2)$ where:

    -   $μ$ is the midpoint of the entire observed range.

    -   $σ= \frac{\text{range width}}{6}$ = so that \~99.7% of values fall within bounds.

2.  **For each row in the data:**

    a\. Sample a value candidate $x$ from the uniform distribution over the category range $[a_i, b_i]$.

    b\. Sample $y∼U(0,f_{max})$ where $f_{max}$​ is the maximum of the global normal density (occurring at $x=μ$ ).

## R implementation 

```{r}
empirical_data <- data.frame(
  id = 1:6,
  category_min = c(100, 200, 150, 300, 200, 400),
  category_max = c(300, 300, 250, 500, 1000, 600)
)

global_min <- min(empirical_data$category_min)
global_max <- max(empirical_data$category_max)
global_mu <- (global_min + global_max) / 2
global_sigma <- (global_max - global_min) / 6
f_max <- dnorm(global_mu, mean = global_mu, sd = global_sigma)

# Verbose rejection sampling with print statements and iteration count
simulate_verbose <- function(min_val, max_val, mu, sigma, f_max, row_id = NA) {
  iter <- 0
  repeat {
    iter <- iter + 1
    x_candidate <- runif(1, min = min_val, max = max_val)
    y <- runif(1, min = 0, max = f_max)
    fx <- dnorm(x_candidate, mean = mu, sd = sigma)

    if (y < fx) {
      message(glue::glue("Row {row_id}: Accepted x = {round(x_candidate, 2)} on iteration {iter}"))
      return(x_candidate)
    } else {
      message(glue::glue("Row {row_id}: Rejected x = {round(x_candidate, 2)}"))
    }
  }
}


# Apply simulation row-wise with purrr::map2 and verbose output
set.seed(42)
empirical_data$simulated_value <- purrr::map2_dbl(
  empirical_data$category_min,
  empirical_data$category_max,
  ~ simulate_verbose(.x, .y, mu = global_mu, sigma = global_sigma, f_max = f_max,
                     row_id = empirical_data$id[which(empirical_data$category_min == .x & empirical_data$category_max == .y)[1]])
)

# Show the final simulated dataset
print(empirical_data)

```

## Visualization

```{r}

library(ggplot2)

ggplot(empirical_data, aes(x = factor(id), y = simulated_value)) +
  geom_point(size = 3) +
  geom_errorbar(aes(ymin = category_min, ymax = category_max), width = 0.2) +
  labs(x = "Observation ID", y = "Simulated Value",
       title = "Simulated Values from Rejection Sampling") +
  theme_minimal()
```

## Conclusion

This method simulates continuous values that:

-   Respect original categorical bins

-   Are more likely to be accepted near the center of a plausible global distribution

-   Can be used as inputs to linear models or other numeric frameworks by combining **interval constraints** with a **global density shape**, the method balances interpretability, flexibility, and statistical plausibility.
